(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{325:function(t,e,s){"use strict";s.r(e);var a=s(0),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"需求分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#需求分析"}},[t._v("#")]),t._v(" 需求分析")]),t._v(" "),s("p",[t._v("接下来的章节，我们会使用 TypeScript 来重构 axios，重构之前，我们需要简单地做一些需求分析，看一下我们这次重构需要支持哪些 feature。")]),t._v(" "),s("h2",{attrs:{id:"features"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[t._v("#")]),t._v(" Features")]),t._v(" "),s("ul",[s("li",[t._v("在浏览器端使用 XMLHttpRequest 对象通讯")]),t._v(" "),s("li",[t._v("支持 Promise API")]),t._v(" "),s("li",[t._v("支持请求和响应的拦截器")]),t._v(" "),s("li",[t._v("支持请求数据和响应数据的转换")]),t._v(" "),s("li",[t._v("支持请求的取消")]),t._v(" "),s("li",[t._v("JSON 数据的自动转换")]),t._v(" "),s("li",[t._v("客户端防止 XSRF")])]),t._v(" "),s("p",[t._v("此外，我们还会支持一些 axios 库支持的一些其它的 feature。这里要注意的，我们这次重构不包括 axios 在 Node 中的实现，因为这部分我们在平时项目中应用的很少，还涉及到很多 Node.js 的知识，将来可能会在我node学习更好的情况下去补充")])])}),[],!1,null,null,null);e.default=r.exports}}]);